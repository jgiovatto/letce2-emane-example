#!/usr/bin/env python
#
# Copyright (c) 2019-2020 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import absolute_import, division, print_function

from argparse import ArgumentParser
import sqlite3
import pandas as pd
import numpy as np
import traceback
import matplotlib.pyplot as plt
from matplotlib import compare_versions, __version__
import glob
import os

argument_parser = ArgumentParser()

argument_parser.add_argument('mgen-db-files',
                             type=str,
                             nargs='+',
                             help='mgen db files')

argument_parser.add_argument('--out-dir',
                             type=str,
                             default='.',
                             help='output directory [default: %(default)s].')

argument_parser.add_argument('--out-file',
                             type=str,
                             default='mgen-latency-runs.png',
                             help='output file [default: %(default)s].')

argument_parser.add_argument('--out-file-cdf',
                             type=str,
                             default='mgen-latency-runs-cdf.png',
                             help='output file [default: %(default)s].')

argument_parser.add_argument('--title',
                             type=str,
                             default='',
                             help='figure title [default: %(default)s].')

ns = argument_parser.parse_args()

args = vars(ns)

data = {}

all_rx_df = pd.DataFrame()

for mgen_db_file in args['mgen-db-files']:
    print('processing: {}'.format(mgen_db_file))
    try:
        connection = sqlite3.connect(mgen_db_file)
        cursor = connection.execute("SELECT * FROM meta;")
        df = pd.read_sql('select * from rx;',connection)
        if all_rx_df.empty:
            all_rx_df = df
        else:
            if not df.empty:
                all_rx_df = pd.concat((all_rx_df,df))
        connection.close()
    except:
        print(traceback.format_exc())
        print('error: unable to process {}'.format(mgen_db_file))
        exit(1)

all_rx_df['latency'] = (all_rx_df.rxtime - all_rx_df.txtime) * 1000

if compare_versions(__version__,'2.0.0'):
    plt.style.use('ggplot')

fig,ax1 = plt.subplots(1,1)

all_rx_df.boxplot(column='latency',
                  by=['txnode','flow'],
                  ax=ax1)

fig.suptitle('\n\n{}'.format(args['title']))
ax1.set_title('Latency')
ax1.set_ylabel('Milliseconds')

fig.subplots_adjust(bottom=0.3)

fig.set_size_inches(17,11)

plt.savefig(os.path.join(args['out_dir'],
                         args['out_file']))
plt.close()

if compare_versions(__version__,'2.0.0'):
    fig,ax1 = plt.subplots(1,1)

    fig.suptitle(args['title'])

    for (txnode,flow),df in all_rx_df.groupby(['txnode','flow']):
        ax1.hist(x=df.latency,
                 bins=1000,
                 density=True,
                 histtype='step',
                 cumulative=True,
                 label='{},{}'.format(txnode,flow))

    ax1.set_title('Latency CDF')
    ax1.set_xlabel('Milliseconds')
    ax1.legend()

    fig.set_size_inches(17,11)
    plt.savefig(os.path.join(args['out_dir'],
                             args['out_file_cdf']))
    plt.close()
